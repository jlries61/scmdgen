#!/usr/bin/perl

use boolean;
use Getopt::Long;
use Scalar::Util qw(looks_like_number);
use Set::Tiny;

sub empty(@);
sub readlist($);
sub readln($);
sub rselect($$@);
sub odominc(\@$%);
sub sub($%);
sub writeln($$);
sub writex($\@\@\@\@\@);

#Set constants
$BLANK = "";
$COMMA = ",";
$SPACE = " ";
$UNDERSCORE = "_";

=head1 Name

scmdgen - Expand a base command sequence as specified and optionally run it

=head1 Version

1.2

=head1 Synopsis

 scmdgen --input=<filename> --output=<filename> --exec=<cmdname> \
         --baseout=<name> --baseext=<str> --use_values --ncombo=<int> \
         --rseed=<int> --headlabel=<str> --taillabel=<str> --dlm=<str> \
         --nthreads=<int>  [arguments...]

=head1 Options

=over

=item --input=<filename>

The name of the command file to be processed.  By default, the command sequence is read from
standard input.

=item --output=<filename>

The name of the file to which the expanded output is to be written.  By default, it is written to
standard output.

=item --exec=<cmdname>

The name of the program which is to execute the command sequence (such as non-GUI SPM).
The program must be able to accept commands via standard input.  If both this option and either
B<--output> or B<--baseout> is specified, then the commands will be sent to both the program and the
specified file(s).

=item --baseout=<name>

The base name of a series of command files that will be created (one per combination of variables).
Names will be of the form <basename><id><ext>, where I<basename> is the base name, I<id> is an
identifier for the value or combination of values, and I<ext> is the extension.
If both B<--output> and B<--baseout> are written to then both types of output file are created.

=item --baseext=<str>

The extension to be used for output file names if B<--baseout> is specified (default=C<.cmd>).

=item --use_values

Construct the combination identifiers from the values of the variables used (constants excepted).
By default, the identifier is a sequential integer.  For the convenience of the programmer,
constants are only excepted if there is only a single set of combinations (no slashes appear among
the arguments).

=item --ncombo=<int>

The maximum number of combinations to use.  If the total number is more than this, then the
combinations to be used are drawn at random.

=item --rseed=<int>

An integer which is to be used as the random number seed (default=37).

=item --headlabel=<str>

A string to be used to label lines in the input command stream that are to be placed at the
beginning of the command sequence.  If multiple command files are written, then such lines appear
first in all of them (default=C<HEAD>).

=item --taillabel=<str>

A string to be used to label lines in the input command stream that are to be placed at the end of
the command sequence.  If multiple command files are written, then such lines appear
last in all of them (default=C<TAIL>).

=item --dlm=<str>

A character delimiter to be used to distinguish variables from regular text.  The delimiter will
always surround the variable name.  For example, if the delimiter is "%", the variable I will be
represented as "%I%".  By default, no delimiter is used.

=item --nthreads=<int>

The maximum number of processes to run at one time (default=1).  Has no effect if --exec is not
defined.

=back

=cut

#Set command line options
$USEVALUES = false;
$BASEEXT = ".cmd";
$RSEED = 37;
$HEADLABEL = "HEAD";
$TAILLABEL = "TAIL";
$DLM = $BLANK;
$NTHREADS = 1;

GetOptions(
  "input=s" => \$INPUT,
  "output=s" => \$OUTPUT,
  "exec=s" => \$EXEC,
  "baseout=s" => \$BASEOUT,
  "baseext=s" => \$BASEEXT,
  "use_values" => \$USEVALUES,
  "ncombo=i" => \$NCOMBO,
  "rseed=i" => \$RSEED,
  "headlabel=s" => \$HEADLABEL,
  "taillabel=s" => \$TAILLABEL,
  "dlm=s" => \$DLM,
  "nthreads=i" => \$NTHREADS) || die;

if (defined($NCOMBO) and $NCOMBO <= 0) {die "--ncombo has to be positive.\n"}
if ($NTHREADS <= 0) {die "--nthreads has to be positive.\n"}

=head1 Arguments

A series of one or more variable specifications of one of the following forms:

=over

=item E<lt>varnameE<gt>=E<lt>valueE<gt>

Assign I<value> to the specified variable as a constant

=item E<lt>varnameE<gt>=E<lt>valuelistE<gt>

Assign the specified values, delimited by commas, to the specified variable.  The values may be
either numeric or character.

=item E<lt>varnameE<gt>=E<lt>nfirstE<gt>:E<lt>nlast>

Assign the sequence of numbers from I<nfirst> to I<nlast> to the specified variable.  The values
are incremented by 1.

=item E<lt>varnameE<gt>=E<lt>nfirstE<gt>:E<lt><nlastE<gt>:E<lt>incE<gt>

Same as above, except that the values are incremented by I<inc>.

=item /

Separates sets of specifications that are to be applied sequentially.  Any limits imposed by
B<--ncombo> are applied to the full set of combinations generated.

=back

We recommend that variable names be upper case, but B<scmdgen> does not enforce this.  Variable
names are case sensitive.

=cut

$ARGC = @ARGV;
if ($ARGC == 0) {
  exec "perldoc $0\n";
  exit;
}
my $nset = 0;
my %spec;
$varset = Set::Tiny->new();
@varlist = ();
foreach $arg (@ARGV) {
  if ($arg eq "/") {
    # Slash separates sets of variable specifications to be combined
    $spec{$nset++} = \@varlist;
    $varset->clear();
    @varlist = ();
    next;
  }
  if (!($arg=~m/=/)) {die "Invalid argument $arg.\n"}
  my ($varname, $value) = split("=", $arg);
  my @value = ();
  if ($varset->has($varname)) {
    my $rvalue = $spec{$varname};
    @value = @$rvalue;
  } else {
    push @varlist, $varname;
    $varset->insert($varname);
  }
  if ($value=~m/:/) {
    my ($first, $last, $inc) = split(":", $value);
    if (!defined($inc)) {$inc = 1}
    elsif ($inc <= 0) {die "Invalid argument $arg.  Only positive increments supported.\n"}
    if ($last < $first) {
      die "Invalid argument $arg.  Ranges must be ordered from smallest to largest.\n"}
    if (!(looks_like_number($first) || looks_like_number($last))) {
      die "Invalid argument $arg.  All values in ranges must be numeric.\n"}
    if (abs($first) == inf || abs($last) == inf) {
      die "Invalid argument $arg.  Infinite values not permitted.\n"}
    for ($n = $first; $n <= $last; $n = $n + $inc) {push @value, $n}
  } else {push @value, split($COMMA, $value)}
  $spec{$varname, $nset} = \@value;
}
$spec{$nset} = \@varlist; # $nset actually ends up being the maximum set index, which is more
                          # convenient than the number of sets

#Read in the input command sequence
if (defined($INPUT)) {open STDIN, "<", $INPUT || die "Failure to open input file $INPUT: $!\n"}
@head = ();
@body = ();
@tail = ();
while (!eof(STDIN)) {
  my @inline = &readlist(STDIN);
  if ($inline[0] eq $HEADLABEL) {
    shift @inline;
    push @head, join($SPACE, @inline);
  } elsif ($inline[0] eq $TAILLABEL) {
    shift @inline;
    push @tail, join($SPACE, @inline);
  } else {
    push @body, join($SPACE, @inline);
  }
}

#Compute combinations of values
my @combos = ();
$ncomb = 0;
@odometer = ();
$iset = 0;  # This will be incremented inside of odominc
while (my %combo = &odominc(\@odometer, $nset, %spec)) {$combos[$ncomb++] = \%combo}
@index = 0 .. $ncomb-1;
if (defined($NCOMBO) and $ncomb > $NCOMBO) {
  @index = &rselect($NCOMBO, $RSEED, @index);
}

if (defined($OUTPUT)) {open STDOUT, ">", $OUTPUT || die "Failure to open output file $OUTPUT: $!\n"}

if (defined($OUTPUT) || !(defined($BASEOUT) or defined($EXEC))) {
  &writex(STDOUT, \@combos, \@index, \@head, \@body, \@tail)}
if (defined($EXEC)) {
  open OUTPIPE, "|-", $EXEC or die "Failure to open pipe to $EXEC: $!\n";
  &writex(OUTPIPE, \@combos, \@index, \@head, \@body, \@tail);
  close OUTPIPE or warn "Failure to close pipe to $EXEC: $!\n";
}
if (defined($BASEOUT)) {
  #Write individual output files
  for (my $icomb = 0; $icomb < $ncomb; $icomb++) {
    #Construct output file name
    my $basename = $BASEOUT;
    my %combo = %{$combos[$icomb]};
    if ($USEVALUES) {
      my @varlist = keys(%combo);
      foreach my $varname (@varlist) {
        if ($nset == 0) { # If there is more than one, it gets too confusing
          my $nval = @{$spec{$varname, $nset}};
          if ($nval < 2) {next}
        }
        $basename .= $UNDERSCORE.$combo{$varname};
      }
    } else {$basename .= $icomb}
    my $outfile = $basename.$BASEEXT;
    open OUTPUT, ">", $outfile || die "Failure to open output file $outfile: $!\n";
    #Write expanded command sequence
    foreach my $line (@head) {&writeln(OUTPUT, $line)}
    foreach my $line (@body) {&writeln(OUTPUT, &sub($line, %combo))}
    foreach my $line (@tail) {&writeln(OUTPUT, $line)}
    close OUTPUT || die "Failure to close output file $outfile: $!\n";
  }
}

=pod

=head1 Description

B<scmdgen> accepts a base command sequence either through standard input or from a file and expands
it as specified by the user.  Here is an example input:

 HEAD submit fpath
 HEAD use boston
 HEAD submit labels
 HEAD category chas
 HEAD model mv
 output bostn2a_LOSSFUNC
 grove bostn2a_LOSSFUNC
 memo "Basic TN model on the Boston housing data"
 memo "LOSS=LOSSFUNC"
 memo echo
 treenet loss=LOSSFUNC go

If we vary I<LOSSFUNC>, we get output looking something like this:

 submit fpath
 use boston
 submit labels
 category chas
 model mv
 output bostn2_LAD
 grove bostn2_LAD
 memo "Basic TN model on the Boston housing data"
 memo "LOSS=LAD"
 memo echo
 treenet loss=LS go
 output bostn2_LS
 grove bostn2_LS
 memo "Basic TN model on the Boston housing data"
 memo "LOSS=LS"
 memo echo
 treenet loss=HUBER go
 output bostn2_HUBER
 grove bostn2_HUBER
 memo "Basic TN model on the Boston housing data"
 memo "LOSS=HUBER"
 memo echo
 treenet loss=HUBER go
 output bostn2_RF
 grove bostn2_RF
 memo "Basic TN model on the Boston housing data"
 memo "LOSS=RF"
 memo echo
 treenet loss=RF go

Submitted to SPM, we build four variants of the same model specification, each using a different
loss function, saving all manner of typing and avoiding the errors associated with repetitive
programming.

If we wanted to write each model specification to a different command file, we invoke B<scmgen> as
follows:

 scmdgen --input=bostn2a.txt --baseout=bostn2a --use_values LOSSFUNC=LAD,LS,HUBER,RF

In this case, we end up with four output files.  The first (F<bostn2a_LAD.cmd>) looks like this:

 submit fpath
 use boston
 submit labels
 category chas
 model mv
 output bostn2_LAD
 grove bostn2_LAD
 memo "Basic TN model on the Boston housing data"
 memo "LOSS=LAD"
 memo echo
 treenet loss=LAD go

We could also send the output directly to SPM with a command like this:

 scmdgen --input=bostn2a.txt --exec=spmu LOSSFUNC=LAD,LS,HUBER,RF

=head1 Copyright

(C) 2019 John L. Ries.

Copying and modifying of this script permitted under the terms of the GNU General Public License,
Version 3; or at the recipient's option, any later version.

=cut

sub empty(@) {
  return (@_ == 0);
}

sub readlist($) {
  my ($fh) = @_;
  my $line = &readln($fh);
  return split(/ +/, $line);
}

sub readln($) {
  my ($fh) = @_;
  my $line = <$fh>;
  chomp $line;
  return $line;
}

sub odominc(\@$%) {
  my ($podom, $nset, %spec) = @_;
  my $nvar = @varlist = @{$spec{$iset}};
  my %combo;
  if (&empty(@$podom)) {foreach my $varname (@varlist) {push @$podom, 0}}
  else {
    my $nvar = @varlist;
    my $ilast = $nvar - 1;
    $$podom[$ilast]++;
    for ($ivar = $ilast; $ivar >0; $ivar--) {
      my $nval = @{$spec{$varlist[$ivar], $iset}};
      if ($$podom[$ivar] >= $nval) {
        $$podom[$ivar - 1]++;
        $$podom[$ivar] = 0;
      } else {last}
    }
  }
  my $nval = @{$spec{$varlist[0], $iset}};
  if ($$podom[0] < $nval) {
    for (my $ivar = 0; $ivar < $nvar; $ivar++) {
      my $varname = $varlist[$ivar];
      my @value = @{$spec{$varname, $iset}};
      $combo{$varname} = $value[$$podom[$ivar]];
    }
  } elsif ($iset < $nset) {
    $iset++;
    @$podom = ();
    %combo = &odominc($podom, $nset, %spec);
  } else {undef %combo}
  return %combo;
}

sub rselect($$@) {
  my ($nselect, $rseed, @index) = @_;
  srand $rseed;
  my %random;
  foreach my $i (@index) {
    $random{$i} = rand();
  }
  my @seq = sort {$random{$a} <=> $random{$b}} @index;
  my @select = ();
  for (my $i = 0; $i < $nselect; $i++) {push @select, $seq[$i]}
  return sort {$a <=> $b} @select;
}

sub sub($%) {
  my ($line, %combo) = @_;
  foreach my $varname (keys(%combo)) {
    my $value = $combo{$varname};
    my $pattern = quotemeta($DLM.$varname.$DLM);
    $line=~s/$pattern/$value/g;
  }
  return $line;
}

sub writeln($$) {
  my ($fh, $line) = @_;
  print $fh "$line\n";
}

sub writex($\@\@\@\@\@) {
  #Write expanded command sequence
  my ($fh, $pcombos, $pindex, $phead, $pbody, $ptail) = @_;
  foreach my $line (@$phead) {&writeln($fh, $line)}
  foreach my $i (@$pindex) {
    my %combo = %{$$pcombos[$i]};
    foreach my $line (@$pbody) {&writeln($fh, &sub($line, %combo))}
  }
  foreach my $line (@$ptail) {&writeln($fh, $line)}
}
